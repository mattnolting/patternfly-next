$pf-c-table-grid--breakpoint-map: build-breakpoint-map("base", "md", "lg", "xl", "2xl");

// stylelint-disable
@mixin pf-mobile-layout {
  @each $breakpoint, $breakpoint-value in $pf-c-table-grid--breakpoint-map {
    $breakpoint-name: if($breakpoint != "base", -#{$breakpoint}, "");

    @include pf-apply-breakpoint($breakpoint, $pf-c-data-toolbar--breakpoint-map, "max-width-test") {
      .pf-c-table.pf-m-grid#{$breakpoint-name} {
        @content;
      }
    }
  }
}

.pf-c-table[class*="pf-m-grid"] {
  // ============================================================ //
  // Start non-conformant variables
  //
  // these variables do not conform to guidelines as styling targets individual elements
  // this is purposeful and necessary to avoid adding selectors to each td/th
  // ============================================================ //

  // Responsive vars
  // ==================================================================

  // Table
  --pf-c-table--grid--BorderColor: var(--pf-global--BorderColor--300);

  // Cell
  --pf-c-table--m-grid--cell--PaddingTop: 0;
  --pf-c-table--m-grid--cell--PaddingRight: 0;
  --pf-c-table--m-grid--cell--PaddingBottom: 0;
  --pf-c-table--m-grid--cell--PaddingLeft: 0;

  // Body
  --pf-c-table--tbody--grid--MarginTop: var(--pf-global--spacer--xs);
  --pf-c-table--tbody--m-expanded--before--Top: var(--pf-global--spacer--sm);
  --pf-c-table--tbody--grid--BorderWidth: var(--pf-global--spacer--sm);

  // Row
  --pf-c-table--tr--grid--BorderWidth: var(--pf-global--spacer--sm);
  --pf-c-table--tr--grid--last-child--BorderWidth: var(--pf-global--BorderWidth--sm);
  --pf-c-table--tr--grid--GridColumnGap: var(--pf-global--spacer--md);
  --pf-c-table--tr--grid--MarginTop: var(--pf-global--spacer--sm);
  --pf-c-table--tr--grid--PaddingTop: var(--pf-global--spacer--md);
  --pf-c-table--tr--grid--PaddingRight: var(--pf-global--spacer--lg);
  --pf-c-table--tr--grid--md--PaddingRight: var(--pf-global--spacer--md);
  --pf-c-table--tr--grid--PaddingBottom: var(--pf-global--spacer--md);
  --pf-c-table--tr--grid--PaddingLeft: var(--pf-global--spacer--lg);
  --pf-c-table--tr--grid--md--PaddingLeft: var(--pf-global--spacer--md);

  @media screen and (max-width: $pf-global--breakpoint--md) {
    --pf-c-table--tr--grid--PaddingRight: var(--pf-c-table--tr--grid--md--PaddingRight);
    --pf-c-table--tr--grid--PaddingLeft: var(--pf-c-table--tr--grid--md--PaddingLeft);
  }

  --pf-c-table--tr--grid--nested-table--PaddingTop: var(--pf-global--spacer--xl);
  --pf-c-table--tr--grid--nested-table--PaddingRight: var(--pf-global--spacer--lg);
  --pf-c-table--tr--grid--nested-table--PaddingBottom: var(--pf-global--spacer--xl);
  --pf-c-table--tr--grid--nested-table--PaddingLeft: var(--pf-global--spacer--lg);

  // Cell
  --pf-c-table--cell--m-grid--hidden-visible--Display: grid;

  // Td
  --pf-c-table--td--grid--GridColumnGap: var(--pf-global--spacer--md);
  --pf-c-table--cell--grid--PaddingTop: var(--pf-global--spacer--md);
  --pf-c-table--cell--grid--PaddingBottom: var(--pf-global--spacer--sm);
  --pf-c-table--cell-th--grid--PaddingTop: var(--pf-global--spacer--sm);
  --pf-c-table--cell--grid--PaddingRight: 0;
  --pf-c-table--cell--grid--PaddingLeft: 0;

  // Compact table
  --pf-c-table--m-compact-tr--grid--PaddingTop: var(--pf-global--spacer--sm);
  --pf-c-table--m-compact-tr--grid--PaddingBottom: var(--pf-global--spacer--sm);
  --pf-c-table--m-compact-tr-td--grid--PaddingTop: var(--pf-global--spacer--xs);
  --pf-c-table--m-compact-tr-td--grid--PaddingBottom: var(--pf-global--spacer--xs);
  --pf-c-table--m-compact__action--grid--MarginTop: calc(var(--pf-global--spacer--xs) * -1);
  --pf-c-table--m-compact__action--grid--MarginBottom: calc(var(--pf-global--spacer--xs) * -1);
  --pf-c-table--m-compact__toggle--c-button--grid--MarginBottom: calc(#{pf-size-prem(6px)} * -1);

  // Expandable row content
  --pf-c-table__expandable-row-content--grid--PaddingRight: var(--pf-global--spacer--lg);
  --pf-c-table__expandable-row-content--grid--PaddingLeft: var(--pf-global--spacer--lg);
  --pf-c-table__expandable-row-content--BackgroundColor: var(--pf-global--BackgroundColor--100);

  // Table check
  --pf-c-table__check--grid--MarginLeft: var(--pf-global--spacer--sm);
  --pf-c-table__check--grid--MarginTop: #{pf-size-prem(6px)};

  // Table action
  --pf-c-table__action--grid--MarginLeft: var(--pf-global--spacer--xl);

  // Table toggle icons
  --pf-c-table__toggle__icon--Transition: .2s ease-in 0s;
  --pf-c-table__toggle--m-expanded__icon--Transform: rotate(180deg);

  // End grid vars
  // ==================================================================
}

// Check table cell
@include pf-mobile-layout {
  display: grid;
  border: none;

  // Thead
  thead {
    display: none;
    visibility: hidden;
  }

  // Tbody
  tbody {
    display: block;

    &:first-of-type {
      border-top: var(--pf-c-table--tbody--grid--BorderWidth) solid var(--pf-c-table--grid--BorderColor);
    }
  }

  // Remove the border from the body inside of the nested table
  table.pf-m-compact > tbody {
    border-top: 0;
  }

  // Table row
  tr:not(.pf-c-table__expandable-row) {
    border-bottom: var(--pf-c-table--tr--grid--BorderWidth) solid var(--pf-c-table--grid--BorderColor);
  }

  // The last tr should always have a border width of 1px
  tr:last-child,
  tbody:last-of-type:not(:only-of-type) > tr {
    border-bottom-width: var(--pf-c-table--tr--grid--last-child--BorderWidth);
  }

  tbody.pf-m-expanded {
    border-bottom: var(--pf-c-table--BorderWidth) solid var(--pf-c-table--BorderColor);

    tr:not(.pf-c-table__expandable-row) {
      border-bottom: 0;
    }

    &:not(:last-of-type) {
      border-bottom: var(--pf-c-table--tbody--grid--BorderWidth) solid var(--pf-c-table--grid--BorderColor);
    }
  }

  // Standard table row (non-expandable)
  // exclude expandable rows
  tr:not(.pf-c-table__expandable-row) {
    display: grid;
    grid-template-columns: 1fr;
    height: auto;

    // set subsequent auto column width to max-content
    grid-auto-columns: max-content;
    grid-column-gap: var(--pf-c-table--tr--grid--GridColumnGap);

    // set base variables to reset later
    padding: var(--pf-c-table--tr--grid--PaddingTop) var(--pf-c-table--tr--grid--PaddingRight) var(--pf-c-table--tr--grid--PaddingBottom) var(--pf-c-table--tr--grid--PaddingLeft);

    // Reset td padding
    & > * {
      padding: var(--pf-c-table--cell--grid--PaddingTop) var(--pf-c-table--cell--grid--PaddingRight) var(--pf-c-table--cell--grid--PaddingBottom) var(--pf-c-table--cell--grid--PaddingLeft);
    }

    // remove padding from first th to align with kebab
    th {
      padding-top: var(--pf-c-table--cell-th--grid--PaddingTop);
    }
  }

  // Remove min-height on buttons
  td.pf-c-table__compound-expansion-toggle,
  th.pf-c-table__compound-expansion-toggle {
    .pf-c-button {
      min-height: 0;
    }
  }

  &.pf-m-compact {
    --pf-c-table--tr--grid--PaddingTop: var(--pf-c-table--m-compact-tr--grid--PaddingTop);
    --pf-c-table--tr--grid--PaddingBottom: var(--pf-c-table--m-compact-tr--grid--PaddingBottom);
    --pf-c-table--cell--grid--PaddingTop: var(--pf-c-table--m-compact-tr-td--grid--PaddingTop);
    --pf-c-table--cell--grid--PaddingBottom: var(--pf-c-table--m-compact-tr-td--grid--PaddingBottom);
    --pf-c-table__check--input--MarginTop: 0;

    .pf-c-table__action {
      margin-top: var(--pf-c-table--m-compact__action--grid--MarginTop);
      margin-bottom: var(--pf-c-table--m-compact__action--grid--MarginTop);
    }

    .pf-c-table__toggle .pf-c-button {
      margin-bottom: var(--pf-c-table--m-compact__toggle--c-button--grid--MarginBottom);
    }
  }

  .pf-c-table__icon > * {
    text-align: left;
  }

  // Standard td, in standard row (non-expandable)
  [data-label] {
    // default pf-hidden-visible() mixin is called in table.scss. redefining variable here
    --pf-c-table--cell--hidden-visible--Display: var(--pf-c-table--cell--m-grid--hidden-visible--Display);

    // grid layout, set td to two column grid
    grid-column: 1;
    grid-column-gap: var(--pf-c-table--td--grid--GridColumnGap);
    align-items: start;

    // @mobile, breakpoint small
    @media screen and (min-width: $pf-global--breakpoint--xs) {
      grid-template-columns: 1fr 1.5fr;
      grid-column: 1;
    }

    // set contents of td to start at column two of td grid
    > * {
      @media screen and (min-width: $pf-global--breakpoint--xs) {
        grid-column: 2;
      }
    }

    &::before {
      font-weight: bold;
      text-align: left;
      content: attr(data-label);
    }
  }

  tr > * {
    display: var(--pf-c-table--cell--m-grid--hidden-visible--Display);

    // Remove first child padding left
    &:first-child {
      --pf-c-table--cell--PaddingLeft: 0;
    }

    // Remove last child padding right
    &:last-child {
      --pf-c-table--cell--PaddingRight: 0;
    }
  }

  // nested tables
  .pf-c-table {
    --pf-c-table--tr--grid--PaddingTop: var(--pf-c-table--tr--grid--nested-table--PaddingTop);
    --pf-c-table--tr--grid--PaddingRight: var(--pf-c-table--tr--grid--nested-table--PaddingRight);
    --pf-c-table--tr--grid--PaddingBottom: var(--pf-c-table--tr--grid--nested-table--PaddingBottom);
    --pf-c-table--tr--grid--PaddingLeft: var(--pf-c-table--tr--grid--nested-table--PaddingLeft);

    border: 0;

    tr:not(.pf-c-table__expandable-row) + tr:not(.pf-c-table__expandable-row) {
      --pf-c-table--tr--grid--PaddingTop: 0;
    }
  }

  .pf-c-table__compound-expansion-toggle {
    // Compound expansion toggle

    .pf-c-button:hover,
    &.pf-m-expanded {
      --pf-c-table__compound-expansion-toggle__button--before--BorderLeftWidth: 0;
      --pf-c-table__compound-expansion-toggle__button--before--BorderRightWidth: 0;
      --pf-c-table__compound-expansion-toggle__button--before--BorderLeftWidth: 0;
      --pf-c-table__compound-expansion-toggle__button--after--BorderTopWidth: 0;
      --pf-c-table__compound-expansion-toggle__button--after--BorderBottomWidth: var(--pf-c-table__compound-expansion-toggle__button--after--BorderWidth);
    }

    // reset button padding
    .pf-c-button {
      --pf-c-table--cell--PaddingTop: var(--pf-c-table--m-grid--cell--PaddingTop);
      --pf-c-table--cell--PaddingRight: var(--pf-c-table--m-grid--cell--PaddingRight);
      --pf-c-table--cell--PaddingBottom: var(--pf-c-table--m-grid--cell--PaddingBottom);
      --pf-c-table--cell--PaddingLeft: var(--pf-c-table--m-grid--cell--PaddingLeft);
    }
  }

  // Compound expansion grid
  // Tbody
  tbody {
    position: relative;

    &::after {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: var(--pf-c-table__expandable-row--before--Width);
      content: "";
    }

    &.pf-m-expanded {
      &::after {
        background-color: var(--pf-c-table__expandable-row--before--BackgroundColor);
      }
    }

    > tr > :first-child:not(.pf-c-table__check)::before {
      position: static;
      width: auto;
      background-color: transparent;
    }
  }
  // Compound expansion grid end


  // Expandable row
  .pf-c-table__expandable-row {
    --pf-c-table--cell--grid--PaddingTop: 0;
    --pf-c-table--cell--grid--PaddingRight: 0;
    --pf-c-table--cell--grid--PaddingBottom: 0;
    --pf-c-table--cell--grid--PaddingLeft: 0;
    --pf-c-table--cell--PaddingRight: 0;
    --pf-c-table--cell--PaddingLeft: 0;

    display: block;
    max-height: var(--pf-c-table__expandable-row--MaxHeight);  // Overflow scroll should only happen on grid
    overflow-y: auto;
    border-bottom: none;
    box-shadow: none;

    // cells
    > * {
      position: static;
      display: block;
    }

    // Modifier - expanded tr
    &.pf-m-expanded {
      border-top-color: var(--pf-c-table--BorderColor);
    }

    td:first-child:not(.pf-c-table__check)::before {
      // Border treatment
      display: none;
      visibility: hidden;
    }

    td {
      &.pf-m-no-padding {
        .pf-c-table__expandable-row-content {
          padding: 0;
        }
      }
    }

    &:not(.pf-m-expanded) {
      display: none;
      visibility: hidden;
    }

    .pf-c-table__expandable-row-content {
      padding-right: var(--pf-c-table__expandable-row-content--grid--PaddingRight);
      padding-left: var(--pf-c-table__expandable-row-content--grid--PaddingLeft);
    }
  }

  // Set defaults
  tr:not(.pf-c-table__expandable-row) {
    .pf-c-table__toggle,
    .pf-c-table__check,
    .pf-c-table__action {
      width: auto;
      padding: 0;
    }
  }

  .pf-c-table__toggle {
    grid-row-start: 20;
    grid-column: -1;
    justify-self: end;
    padding-right: 0;
  }

  // Check table cell
  .pf-c-table__check {
    margin-top: var(--pf-c-table__check--grid--MarginTop);
    margin-left: var(--pf-c-table__check--grid--MarginLeft);
    grid-row-start: 1;
    grid-column-start: 2;

    // if action is present, add margin left to accommodate checkbox
    & ~ .pf-c-table__action {
      margin-left: var(--pf-c-table__action--grid--MarginLeft);
    }
  }

  // Action cell
  .pf-c-table__action {
    grid-row-start: 1;
    grid-column-start: 2;
    text-align: right;

    // @smallest breakpoint
    @media screen and (max-width: $pf-global--breakpoint--sm) {
      grid-row-start: 1;
      grid-column-start: 2;
      margin-left: 0;
    }
  }

  .pf-c-table__inline-edit-action {
    grid-column: 2;
    grid-row: 2;
  }

  // Toggles
  .pf-c-table__toggle {
    .pf-c-button > * {
      transition: var(--pf-c-table__toggle__icon--Transition);
    }

    .pf-c-button.pf-m-expanded > * {
      transform: var(--pf-c-table__toggle--m-expanded__icon--Transform);
    }
  }

  // Fit content
  .pf-m-fit-content {
    width: auto;
    white-space: normal;
  }
}

// stylelint-enable
